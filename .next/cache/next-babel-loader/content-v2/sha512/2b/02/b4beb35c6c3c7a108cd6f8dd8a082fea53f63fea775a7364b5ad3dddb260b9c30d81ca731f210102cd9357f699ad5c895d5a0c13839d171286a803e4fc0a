{"ast":null,"code":"import React, { useEffect, useReducer } from \"react\";\nimport RequestReducer from \"../reducers\";\nimport axios from \"axios\";\nimport { GET_ALL_SUCCESS, GET_ALL_FAILURE, PUT_SUCCESS, PUT_FAILURE } from \"../actions\";\n\nconst useRequest = (baseUrl, routeName) => {\n  const {\n    0: {\n      records,\n      status,\n      error\n    },\n    1: dispatch\n  } = useReducer(RequestReducer, {\n    records: [],\n    status: REQUEST_STATUS.LOADING,\n    error: null\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(`${baseUrl}/${routeName}`);\n        dispatch({\n          records: response.data,\n          type: GET_ALL_SUCCESS\n        });\n      } catch (e) {\n        dispatch({\n          type: GET_ALL_FAILURE,\n          error: e\n        });\n      }\n    };\n\n    fetchData();\n  }, [baseUrl, routeName]);\n  const propsLocal = {\n    records,\n    status,\n    error,\n    put: async record => {\n      try {\n        await axios.put(`${baseUrl}/${routeName}/${record.id}`, record);\n        dispatch({\n          type: PUT_SUCCESS,\n          singleRecord: record\n        });\n      } catch (e) {\n        dispatch({\n          type: PUT_FAILURE,\n          error: e\n        });\n      }\n    }\n  };\n  return propsLocal;\n};\n\nexport default useRequest;","map":{"version":3,"sources":["J:/react-search-designed-component/src/customHooks/useRequest.js"],"names":["React","useEffect","useReducer","RequestReducer","axios","GET_ALL_SUCCESS","GET_ALL_FAILURE","PUT_SUCCESS","PUT_FAILURE","useRequest","baseUrl","routeName","records","status","error","dispatch","REQUEST_STATUS","LOADING","fetchData","response","get","data","type","e","propsLocal","put","record","id","singleRecord"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C;AACA,OAAOC,cAAP,MAA2B,aAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,eADF,EAEEC,eAFF,EAGEC,WAHF,EAIEC,WAJF,QAKO,YALP;;AAOA,MAAMC,UAAU,GAAG,CAACC,OAAD,EAAUC,SAAV,KAAwB;AACzC,QAAM;AAAA,OAAC;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,MAAX;AAAmBC,MAAAA;AAAnB,KAAD;AAAA,OAA6BC;AAA7B,MAAyCb,UAAU,CAACC,cAAD,EAAiB;AACxES,IAAAA,OAAO,EAAE,EAD+D;AAExEC,IAAAA,MAAM,EAAEG,cAAc,CAACC,OAFiD;AAGxEH,IAAAA,KAAK,EAAE;AAHiE,GAAjB,CAAzD;AAMAb,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,SAAS,GAAG,YAAY;AAC5B,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAN,CAAW,GAAEV,OAAQ,IAAGC,SAAU,EAAlC,CAAvB;AACAI,QAAAA,QAAQ,CAAC;AACPH,UAAAA,OAAO,EAAEO,QAAQ,CAACE,IADX;AAEPC,UAAAA,IAAI,EAAEjB;AAFC,SAAD,CAAR;AAID,OAND,CAME,OAAOkB,CAAP,EAAU;AACVR,QAAAA,QAAQ,CAAC;AACPO,UAAAA,IAAI,EAAEhB,eADC;AAEPQ,UAAAA,KAAK,EAAES;AAFA,SAAD,CAAR;AAID;AACF,KAbD;;AAcAL,IAAAA,SAAS;AACV,GAhBQ,EAgBN,CAACR,OAAD,EAAUC,SAAV,CAhBM,CAAT;AAkBA,QAAMa,UAAU,GAAG;AACjBZ,IAAAA,OADiB;AAEjBC,IAAAA,MAFiB;AAGjBC,IAAAA,KAHiB;AAIjBW,IAAAA,GAAG,EAAE,MAAOC,MAAP,IAAkB;AACrB,UAAI;AACF,cAAMtB,KAAK,CAACqB,GAAN,CAAW,GAAEf,OAAQ,IAAGC,SAAU,IAAGe,MAAM,CAACC,EAAG,EAA/C,EAAkDD,MAAlD,CAAN;AACAX,QAAAA,QAAQ,CAAC;AACPO,UAAAA,IAAI,EAAEf,WADC;AAEPqB,UAAAA,YAAY,EAAEF;AAFP,SAAD,CAAR;AAID,OAND,CAME,OAAOH,CAAP,EAAU;AACVR,QAAAA,QAAQ,CAAC;AACPO,UAAAA,IAAI,EAAEd,WADC;AAEPM,UAAAA,KAAK,EAAES;AAFA,SAAD,CAAR;AAID;AACF;AAjBgB,GAAnB;AAmBA,SAAOC,UAAP;AACD,CA7CD;;AA+CA,eAAef,UAAf","sourcesContent":["import React, { useEffect, useReducer } from \"react\";\r\nimport RequestReducer from \"../reducers\";\r\nimport axios from \"axios\";\r\nimport {\r\n  GET_ALL_SUCCESS,\r\n  GET_ALL_FAILURE,\r\n  PUT_SUCCESS,\r\n  PUT_FAILURE,\r\n} from \"../actions\";\r\n\r\nconst useRequest = (baseUrl, routeName) => {\r\n  const [{ records, status, error }, dispatch] = useReducer(RequestReducer, {\r\n    records: [],\r\n    status: REQUEST_STATUS.LOADING,\r\n    error: null,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get(`${baseUrl}/${routeName}`);\r\n        dispatch({\r\n          records: response.data,\r\n          type: GET_ALL_SUCCESS,\r\n        });\r\n      } catch (e) {\r\n        dispatch({\r\n          type: GET_ALL_FAILURE,\r\n          error: e,\r\n        });\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [baseUrl, routeName]);\r\n\r\n  const propsLocal = {\r\n    records,\r\n    status,\r\n    error,\r\n    put: async (record) => {\r\n      try {\r\n        await axios.put(`${baseUrl}/${routeName}/${record.id}`, record);\r\n        dispatch({\r\n          type: PUT_SUCCESS,\r\n          singleRecord: record,\r\n        });\r\n      } catch (e) {\r\n        dispatch({\r\n          type: PUT_FAILURE,\r\n          error: e,\r\n        });\r\n      }\r\n    },\r\n  };\r\n  return propsLocal;\r\n};\r\n\r\nexport default useRequest;\r\n"]},"metadata":{},"sourceType":"module"}